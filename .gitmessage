

# ### Commit Message Format
# Each commit message consists of a **header**, and a **body**.  The header has a special
# format that includes a **type**, a **scope** and a **subject**. The **header** is mandatory and the **scope** of the header is optional.
# Any line of the commit message cannot be longer 100 characters! This allows the message to be easier
# to read on GitHub as well as in various git tools.
# 
# ```
# <type>(<scope>): <subject>
# <BLANK LINE>
# <body>
# ```
# ### Type
# Must be one of the following:
# 
# * **feature**: A new feature
# * **fix**: A bug fix
# * **docs**: Documentation only changes
# * **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing
#   semi-colons, etc)
# * **refactor**: A code change that neither fixes a bug nor adds a feature
# * **perf**: A code change that improves performance
# * **test**: Adding missing or correcting existing tests
# * **core**: Changes to the build process or auxiliary tools and libraries such as documentation
#   generation
# 
# ### Scope
# The scope could be anything specifying place of the commit change. For example `schema`,
# `processor`, `controller`, `action`, `helper`, etc...
# 
# You can use `*` when the change affects more than a single scope.
# 
# ### Subject
# The subject contains succinct description of the change:
# 
# * use the imperative, present tense: "change" not "changed" nor "changes"
# * don't capitalize first letter
# * no dot (.) at the end
# 
# ### Body
# Just as in the **subject**, use the imperative, present tense: "change" not "changed" nor "changes".
# The body should include the motivation for the change and contrast this with previous behavior.
# 
# ### Sample commit message
# ```
# feature(schema): Add automate schema validator
# 
# To make it easuer to validate every change in schema, so we add automate schema validator to validate it every time we accept new PR.
# 
# ```
# 
